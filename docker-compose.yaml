services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - taxi-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - taxi-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus

  postgres:
    container_name: postgres
    image: postgres:latest
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./pgdata:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    restart: unless-stopped
    networks:
      - taxi-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  eureka:
    build: spring-eureka-server
    ports:
      - "8761:8761"
    networks:
      - taxi-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8761/eureka/apps || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  gateway:
    build: api-gateway
    depends_on:
      eureka:
        condition: service_started
      driver:
        condition: service_started
      passenger:
        condition: service_started
      rating:
        condition: service_started
      ride:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8083:8080"
    networks:
      - taxi-network

  driver:
    build: service-driver
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      eureka:
        condition: service_healthy
    ports:
      - "8078:8080"
    networks:
      - taxi-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/driver_db
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}

  passenger:
    build: service-passenger
    depends_on:
      postgres:
        condition: service_healthy
      eureka:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8079:8080"
    networks:
      - taxi-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/passenger_db
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}

  rating:
    build: service-rating
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      eureka:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "8080:8080"
    networks:
      - taxi-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/rating_db
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${SPRING_KAFKA_BOOTSTRAP_SERVERS}

  ride:
    build: service-ride
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      eureka:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "8081:8080"
    networks:
      - taxi-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/ride_db
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${SPRING_KAFKA_BOOTSTRAP_SERVERS}

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 1
    networks:
      - taxi-network

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak_db
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres

      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8082

      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin

    command: start-dev
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy

  elasticsearch:
    image: elasticsearch:8.15.3
    container_name: elasticsearch
    ports:
      - '9200:9200'
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.ml.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.http.ssl.enabled=false
    restart: always

    networks:
      - taxi-network

  logstash:
    image: logstash:8.15.3
    container_name: logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - '5001:5001'
    links:
      - elasticsearch
    depends_on:
      - elasticsearch
    networks:
      - taxi-network

  kibana:
    image: kibana:8.15.3
    container_name: kibana
    ports:
      - '5601:5601'
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    links:
      - elasticsearch
    depends_on:
      - logstash
    networks:
      - taxi-network

networks:
  taxi-network:
    driver: bridge

volumes:
  postgres:
    driver: local